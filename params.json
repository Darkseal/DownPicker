{"name":"Downpicker","tagline":"Lightweight DropDownList / ComboBox UI control for iOS, written in Objective-C","body":"# DownPicker\r\n\r\nDownPicker is an extremely light-weight class library for creating *DropDownList* / *ComboBox* controls for iOS that will behave like their HTML / Android counterparts.\r\nYou'll only need a standard **UITextField** and few lines of code.\r\n\r\n\r\n## What does it do\r\n\r\nIt takes any **UITextField** already present in your code (including those added to a *Storyboard*):\r\n\r\n![alt text](https://raw.githubusercontent.com/Darkseal/DownPicker/gh-pages/images/DownPicker/UITextField.base.png \"Here's a standard UITextField\")\r\n\r\nand turns it into this:\r\n\r\n![alt text](https://raw.githubusercontent.com/Darkseal/DownPicker/gh-pages/images/DownPicker/UITextField.DownPicker.png \"Here's a DownPicker control\")\r\n\r\nIt's as simple as that. You only need to provide an array of data.\r\n\r\n**NOTE**: If you don't like the *control wrapper* approach, you can also use it as a *custom control* via the included **UIDownPicker** class: read the following paragraph for more info.\r\n\r\n\r\n## How does it work\r\n\r\nDownPicker is basically a *control interface wrapper*, meaning that you won't use it as a control - it will use an existing UITextField control instead.\r\nThis is a good thing, because you'll be able to design, positioning and skin your UITextField like you always do, programmatically or inside a *Storyboard* UI, depending on how you are used to work. You won't change your style, as it will adapt to suit yours.\r\n\r\nHowever, if you don't like the *control wrapper* pattern, you can just use it as a *custom control* using the included **UIDownPicker** class. It's entirely up to you (and very easy to install in both scenarios).\r\n\r\n\r\n## Installation\r\n\r\n### Using CocoaPods\r\n\r\nDownPicker is available through [CocoaPods](http://cocoapods.org). To install it, simply add the following line to your Podfile:\r\n\r\n`pod \"DownPicker\"`\r\n\r\n[![CI Status](http://img.shields.io/travis/Ryan/DownPicker.svg?style=flat)](https://travis-ci.org/Ryan/DownPicker)\r\n[![Version](https://img.shields.io/cocoapods/v/DownPicker.svg?style=flat)](http://cocoapods.org/pods/DownPicker)\r\n[![License](https://img.shields.io/cocoapods/l/DownPicker.svg?style=flat)](http://cocoapods.org/pods/DownPicker)\r\n[![Platform](https://img.shields.io/cocoapods/p/DownPicker.svg?style=flat)](http://cocoapods.org/pods/DownPicker)\r\n\r\n### Manual Installation\r\n\r\nDownload the latest version from [this link](https://github.com/Darkseal/DownPicker/archive/master.zip), \r\nthen unzip & drag-drop the /DownPicker/ folder inside your iOS project. You can do that directly within XCode,\r\njust be sure you have the **copy items if needed** and the **create groups** options checked.\r\n\r\n\r\n## How to Use\r\n\r\nOnce you have DownPicker installed and included in your project, you can either use it as a Control Wrapper or as a Custom Control: the choice is up to you, depending on your programming style.\r\n\r\n### As a Control Wrapper\r\n\r\nAdd (or choose) a **UITextField** you would like to transform to a DownPicker. You can use the Storyboard designer tool or do it programmatically; you can also set up constraints, custom placement/coords, font, colors and anything else you like. When you're done, open your controller's .h file and create a property for the DownPicker wrapper:\r\n\r\n    #import \"DownPicker.h\";\r\n\r\n    @property (strong, nonatomic) DownPicker *downPicker;\r\n\r\nThen switch to the .m file and add these lines to your controller's **viewDidAppear** method:\r\n\r\n    // create the array of data\r\n    NSMutableArray* bandArray = [[NSMutableArray alloc] init];\r\n\r\n    // add some sample data\r\n    [bandArray addObject:@\"Offsprings\"];\r\n    [bandArray addObject:@\"Radiohead\"];\r\n    [bandArray addObject:@\"Muse\"];\r\n    [bandArray addObject:@\"R.E.M.\"];\r\n    [bandArray addObject:@\"The Killers\"];\r\n    [bandArray addObject:@\"Social Distortion\"];\r\n\r\n    // bind yourTextField to DownPicker\r\n    self.downPicker = [[DownPicker alloc] initWithTextField:self.yourTextField withData:bandArray];\r\n\r\nThat's it. You can retrieve the user's choice at any time using `self.datePicker.text` or `textField.text`.\r\n\r\n### As a Custom Control\r\nIf you'd like to use DownPicker as a custom control instead, just instantiate the included **UIDownPicker** class programmatically and attach it to your view like any other legacy UI control:\r\n\r\n    @interface YourViewController () {\r\n        UIDownPicker *_dp;\r\n    }\r\n    @end\r\n\r\n    @end\r\n    - (void)viewDidLoad\r\n    {\r\n        [super viewDidLoad];\r\n        self._dp = [[UIDownPicker] initWithData:yourMutableArray];\r\n        [self.view addSubview:self._dp]; \r\n    }\r\n    \r\nYou can then customize it using the inner DownPicker public property.\r\n\r\n## Status Change event handling\r\nYou can bind your own delegate function to DownPicker's status change by using the `UIControlEventValueChanged` Control action in the following way:\r\n\r\n    [self.yourDownPicker addTarget:self \r\n        action:@selector(dp_Selected:)\r\n        forControlEvents:UIControlEventValueChanged];\r\n\r\nand then:\r\n\r\n    -(void)dp_Selected:(id)dp {\r\n        NSString* selectedValue = [self.youtDownPicker text];\r\n        // do what you want\r\n    }\r\n\r\n\r\n## Additional Features\r\n\r\nYou can also:\r\n- defer data loading using the `[self.downPicker setData:array]` method.\r\n- disable the right arrow image using the `[self.downPicker showArrowImage:bool]` method.\r\n- use a custom right arrow image using the `[self.downPicker setArrowImage:UIImage*]` method. \r\nYou can use `[UIImage imageNamed:@\"yourCustomImage.png\"]` to set any image in your project.\r\n- configure (and/or localize) the placeholder text string using the `[self.downPicker setPlaceholder:NSString*]` and `[self.downPicker setPlaceholderWhileSelecting:NSString]` methods.\r\n- retrieve, customize and hook on the inner **UIPickerView** control using the `[self.downPicker getPickerView]` method (use at your own risk).\r\n- retrieve, customize and hook on the inner **UITextField** control using the `[self.downPicker getTextField]` method (use at your own risk). Remember that it's the exact same control you passed, so you might prefer to use your main reference instead.\r\n\r\n\r\n## Upcoming Features\r\n\r\n- More customization options (give me your suggestions).\r\n- Dynamic data-binding.\r\n... and more!\r\n\r\n\r\n## Support\r\n\r\nYou can support this project's development by clicking on the following button.\r\n\r\n[<img src=\"https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\" border=\"0\" alt=\"Donate\">](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=F576E73P5X526)\r\n\r\nThanks a lot!\r\n\r\n\r\n## Author\r\n\r\nRyan, ryan@ryadel.com\r\n\r\n\r\n## License\r\n\r\nDownPicker is available under the MIT license. See the LICENSE file for more info.\r\n","google":"UA-55895187-3","note":"Don't delete this file! It's used internally to help with page regeneration."}